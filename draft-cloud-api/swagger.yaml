# This is a description of the Draft.Cloud API in Swagger format.

swagger: '2.0'
basePath: /api/v1

info:
  version: "1"
  title: Draft.Cloud API

paths:
  /documents/{owner}:
    get:
      description: |
        Gets all `Document`s owned by a user (that the requestor has permission to see).
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: Authentication
          in: header
          type: string
          description: An API key that has READ access to the document. Optional if the document's anonymous access level is READ.
      responses:
        200:
          description: The documents are returned as a JSON array.
          headers:
            Content-Type:
              description: Always `application/json`.
              type: string
        404:
          description: User does not exist or caller does not have permission to see the user.
    post:
      description: |
        Creates a `Document` with a unique name. A successful response is a 302 response with a Location header
        that has a URL pointing to the new document.
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: Content-Type
          in: header
          type: string
          description: Must be `application/json`.
        - name: Authentication
          in: header
          type: string
          description: An API key that has ADMIN access to the document, or for a new document and API key for the owner of the new document.
          required: true
      responses:
        302:
          description: A new document was created. The response has no body but has a Location header pointing to the API URL for the document,
           from which the document's name and other metadata can be retrieved.
          headers:
            Location:
              description: The API GET URL for the newly created document.
              type: string
        403:
          description: The caller has permission to see the owner but not create documents.
        404:
          description: Owner does not exist or caller does not have permission to see it.
  /documents/{owner}/{document}:
    get:
      description: |
        Gets `Document` metadata.
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: document
          in: path
          description: The name of a `Document` owned by  `owner`.
          required: true
          type: string
        - name: Authentication
          in: header
          type: string
          description: An API key that has READ access to the document. Optional if the document's anonymous access level is READ.
      responses:
        200:
          description: The document metadata is returned as JSON.
          headers:
            Content-Type:
              description: Always `application/json`.
              type: string
          schema:
            title: Document
            type: object
        404:
          description: The owner or document does not exist or caller does not have permission to see the owner or document.
    put:
      description: |
        Creates a `Document` or updates an existing `Document`'s metadata. The response is as in GET.
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: document
          in: path
          description: The name of a `Document` owned by  `owner`, or the name of a new document to create.
          required: true
          type: string
        - name: Content-Type
          in: header
          type: string
          description: Must be `application/json`.
        - name: Authentication
          in: header
          type: string
          description: An API key that has ADMIN access to the document, or for a new document and API key for the owner of the new document.
          required: true
      responses:
        200:
          description: The (existing) document was updated. The response body is as in GET.
        201:
          description: A new document was created. The response body is as in GET.
        403:
          description: The caller has permission to see the document but not make changes to its metadata.
        404:
          description: Document does not exist or caller does not have permission to see the document.
    delete:
      description: |
        Deletes a `Document`.
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: document
          in: path
          description: The name of a `Document` owned by  `owner`.
          required: true
          type: string
        - name: Authentication
          in: header
          type: string
          description: An API key that has ADMIN access to the document.
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: The document was deleted.
        403:
          description: The caller has permission to see the document but not delete it.
        404:
          description: Document does not exist or caller does not have permission to see the document.
  /documents/{owner}/{document}/content{path}:
    get:
      description: |
        Gets `Document` content. If a path to a subpart of the document is given at the end of the URL, then only a part of the document is returned. The document is returned either as JSON or as UTF-8 encoded plain text, depending on the Accept header you send in the request.
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: document
          in: path
          description: The name of a `Document` owned by  `owner`.
          required: true
          type: string
        - name: path
          in: path
          description: A [JSON Pointer](https://tools.ietf.org/html/rfc6901), which looks like `/x/y/15`. 
          type: string
          format: binary
          default: ""
        - name: Revision-Id
          in: header
          type: string
          description: A Revision UUID. If specified, gets the content of the document at the indicated revision. Otherwise the document's content at the most recent revision is returned.
          default: ""
        - name: Accept
          in: header
          type: string
          description: Either `text/plain` or `application/json`. (If the Accept header says both formats are accepted, you may get either format back.)
        - name: Authentication
          in: header
          type: string
          description: An API key that has READ access to the document. Optional if the document's anonymous access level is READ.
      responses:
        200:
          description: Document content is returned as JSON.
          headers:
            Revision-Id:
              description: The UUID of the document's current `Revision`, or the revision specified in the Revision-Id header if the header is given. May be `singularity` to indicate that the document has not yet had any revisions yet. (Such documents always have `null` content.)
              type: string
            Access-Level:
              description: The access level that the user has on this document. Either READ, WRITE, or ADMIN.
              type: string
            Content-Type:
              description: "`application/json` or `text/plain`, depending on the Accept header you send. (If the Accept header says both formats are accepted but text/plain is preferred, you may get application/json in the response if the document's content is not plain text.)"
              type: string
        404:
          description: Document does not exist or caller does not have permission to see the document.
        406:
          description: The Accept header was set to `text/plain` but the document content is not plain text, or an invalid content type was sent in the Accept header.
    put:
      description: |
        Updates the content of a `Document` with content provided in the request body.
        Document content is text or arbitrary JSON data provided in the request body
        (see the request Content-Type header parameter).
        If a [JSON Pointer](https://tools.ietf.org/html/rfc6901) to a subpart of the document is given at the end of the URL (see GET),
        then the content provided in this PUT request replaces the content at the location in the
        document that the pointer points to and the operation in the revision in the response body is
        relative to that part of the document.
        If a base revision is specified with the Base-Revision-Id header, then the changes made
        relative to the base revision will be merged with the changes made in any Revisions that
        were made after the base revision (probably by other users acting simultaneously).
        The response is a new `Revsion` object (or an empty 200 OK response if the document did
        not change).
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: document
          in: path
          description: The name of a `Document` owned by  `owner`.
          required: true
          type: string
        - name: path
          in: path
          description: A [JSON Pointer](https://tools.ietf.org/html/rfc6901), which looks like `/x/y/15`. It must exist in the document at the base revision.
          type: string
          format: binary
          default: ""
        - name: Revision-Comment
          in: header
          type: string
          description: An optional comment (typically explaining the purpose of the Revision) that is stored with the Revision.
        - name: Revision-Userdata
          in: header
          type: json
          description: JSON-encoded arbitrary user data stored with the Revision.
        - name: Base-Revision-Id
          in: header
          type: string
          description: An optional `Revision` UUID that the new document content is based on. May be `singularity` indicating that the base revision is the implicit revision that exists when a document is first created. If not specified, the base revision is the document's current revision.
        - name: Content-Type
          in: header
          type: string
          description: Either `text/plain` if you are sending a plain text document (it is converted to a JSON string) or `application/json` if you are sending arbitrary JSON data as the document.
        - name: Authentication
          in: header
          type: string
          description: An API key that has WRITE access to the document.
          required: true
      responses:
        200:
          description: The request body does not differ from the document's content at the base revision.
        201:
          description: A `Revision` was saved. The response is the new `Revision`.
          headers:
            Content-Type:
              description: Always `application/json`.
              type: string
        400:
          description: The path or base revision is not valid.
        403:
          description: The caller has permission to see the document but not edit it.
        404:
          description: Document does not exist or caller does not have permission to see the document
        409:
          description: The document was modified after the base revision and a rebase of the changes was not possible.
    patch:
      description: |
        Updates the content of a `Document` with a raw JOT operation provided in the request body.
        If a [JSON Pointer](https://tools.ietf.org/html/rfc6901) to a subpart of the document is given at the end of the URL (see GET),
        then the operation applies to that location in the document that the pointer points to and the operation in the revision in the response body is
        relative to that part of the document.
        If a base revision is specified with the Base-Revision-Id header, then the operation
        will be transformed to apply logically as if the changes made in any Revisions that
        were made after the base revision were made simultaneously.
        The response is a new `Revsion` object.
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: document
          in: path
          description: The name of a `Document` owned by  `owner`.
          required: true
          type: string
        - name: path
          in: path
          description: A [JSON Pointer](https://tools.ietf.org/html/rfc6901), which looks like `/x/y/15`. It must exist in the document at the base revision.
          type: string
          format: binary
          default: ""
        - name: Revision-Comment
          in: header
          type: string
          description: An optional comment (typically explaining the purpose of the Revision) that is stored with the Revision.
        - name: Revision-Userdata
          in: header
          type: json
          description: JSON-encoded arbitrary user data stored with the Revision.
        - name: Base-Revision-Id
          in: header
          type: string
          description: An optional `Revision` UUID that the new document content is based on. May be `singularity` indicating that the base revision is the implicit revision that exists when a document is first created. If not specified, the base revision is the document's current revision.
        - name: Content-Type
          in: header
          type: string
          description: Must be `application/json`.
        - name: Authentication
          in: header
          type: string
          description: An API key that has WRITE access to the document.
          required: true
      responses:
        201:
          description: A `Revision` was saved. The response is the new `Revision`.
          headers:
            Content-Type:
              description: Always `application/json`.
              type: string
        400:
          description: The path or base revision is not valid.
        403:
          description: The caller has permission to see the document but not edit it.
        404:
          description: Document does not exist or caller does not have permission to see the document
        409:
          description: The document was modified after the base revision and a rebase of the operation was not possible.
  /documents/{owner}/{document}/history:
    get:
      description: |
        Gets the revision history of a `Document`, which is an array of `Revision` objects.
      parameters:
        - name: owner
          in: path
          description: The name of a `User` who owns the document.
          required: true
          type: string
        - name: document
          in: path
          description: The name of a `Document` owned by  `owner`.
          required: true
          type: string
        - name: since
          in: query
          description: An optional `Revision` UUID. If not specified, the full history of the document is returned. Otherwise only the changes made after the given revision are returned.
          type: string
        - name: path
          in: query
          description: A [JSON Pointer](https://tools.ietf.org/html/rfc6901), which looks like `/x/y/15`, to a part of the document to get the history of, ignoring changes to other parts of the document. The path must exist in the document at the revision specified by `since`. If `since` is omitted (the full document history is returned), then `path` cannot be specified.
          type: string
        - name: Authentication
          in: header
          type: string
          description: An API key that has READ access to the document. Optional if the document's anonymous access level is READ.
      responses:
        200:
          description: Revision history is returned as JSON, in chronological order (oldest first). If the `path` parameter is specified, the revisions are relative to that location in the document.
          headers:
            Content-Type:
              description: Always `application/json`.
              type: string
        404:
          description: Document does not exist or caller does not have permission to see the document