# This is a description of the Draft.Cloud API in Swagger format.
swagger: '2.0'
host: draft.cloud
basePath: /api/v1
schemes:
- https
info:
  version: '1'
  title: Draft.Cloud RESTful HTTP API
  description: |
    Draft.Cloud is a structured document version management and conflictless
    collaboration platform.

    Each document on Draft.Cloud is a JSON value. Changes to documents
    are tracked structurally, meaning instead of typical line-oriented
    diffs and patches, Draft.Cloud tracks where in the JSON document
    changes are made, traversing object keys, array indexes, and string
    offsets.

    Documents are modified either by `PUT`ing the new document or submitting
    a `PATCH` using [JOT](https://github.com/joshdata/jot). In both cases
    a base revision may (or should) be specified in the request headers.
    When the base revision is not the current document version, Draft.Cloud
    will merge the incoming changes with the changes already submitted with
    conflicts automatically resolved.
    
    This page documents Draft.Cloud's RESTful HTTP API. The API includes

    * creating user accounts
    * creating and deleting documents
    * adding other users to the document's team
    * getting and updating document content

    All API requests except for creating a new user require pasing an API
    key in the HTTP request `Authorization` header. You can get an API key
    by creating a new user using the API or from the Draft.Cloud website.

paths:
  /users:
    post:
      summary: Create a user
      description: |
        Creates a new user, responding with a user `id`, an API key, and the API base URL for the user's documents.

        If an API key is sent in the request, the new user is owned by the user making the request.
        If the Draft.Cloud backend is configured to allow the creation of anonymous users,
        an API key is not required.

        If a JSON object is given in the request POST body, then the `name` and `profile` fields are used to initialize the new user.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        type: string
        description: Optional (see description). If provided, an API key that has ADMIN access
          to key's owner.
      responses:
        '200':
          description: A user was created. The user's `id` and username and other
            information besides the API key are returned in the JSON response body.
            See `GET /users/{user}` for details.
            The user's API key is returned in the `X-Api-Key` header.
          headers:
            X-Api-Key:
              description: The user's API key.
              type: string
        '400':
          description: The name given in the request body is already in use.
        '403':
          description: The Draft.Cloud backend does not allow the creation of new
            users through the API.
  /users/{user}:
    get:
      summary: Get user information
      description: |
        Gets `User` information.
      produces:
      - application/json
      parameters:
      - name: user
        in: path
        description: The `id` of a `User`, or "me" to get your own information.
        required: true
        type: string
      - name: Authorization
        in: header
        type: string
        description: An API key that has READ access to the user.
      responses:
        '200':
          description: The User information is returned as JSON.
          schema:
            type: object
            properties:
              id:
                type: string
                example: ee84121d-3a2e-421f-80eb-180e9c340ad3
              name:
                type: string
                example: dqGYQos5CM19E4DgfvPYb9
              created:
                type: string
                example: 2018-05-30T12:58:48.955Z
              api_urls:
                type: object
                properties:
                  profile:
                    type: string
                    example: https://draft.cloud/api/v1/users/ee84121d-3a2e-421f-80eb-180e9c340ad3
                  documents:
                    type: string
                    example: https://draft.cloud/api/v1/documents/ee84121d-3a2e-421f-80eb-180e9c340ad3
        '404':
          description: User does not exist or caller does not have permission to see
            the user.
    put:
      summary: Update a user
      description: |
        Updates a User. The response is as in a GET.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user
        in: path
        description: The `id` of a `User`, or "me" to update your own information.
        required: true
        type: string
      - name: Content-Type
        in: header
        type: string
        description: Must be `application/json`.
      - name: Authorization
        in: header
        type: string
        description: An API key that has ADMIN access to the user.
        required: true
      responses:
        '200':
          description: The User was updated. The response body is as in GET.
        '403':
          description: The caller has permission to see the User but not make changes
            to it.
        '404':
          description: User does not exist or caller does not have permission to see
            the document.
  /documents/{owner}:
    get:
      summary: Get a user's documents
      description: |
        Gets all `Document`s owned by a user (that the requestor has permission to see).
      produces:
      - application/json
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: Authorization
        in: header
        type: string
        description: An API key that has READ access to owner's documents.
      responses:
        '200':
          description: The documents are returned as a JSON array. See the GET response for documents for details.
        '404':
          description: User does not exist or caller does not have permission to see
            the user.
    post:
      summary: Create a document
      description: |
        Creates a `Document`.
      
        If a JSON object is given in the request POST body, then the `name` and other fields are used to initialize the new document.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: Authorization
        in: header
        type: string
        description: An API key that has ADMIN access to the owner's documents.
        required: true
      responses:
        '200':
          description: A new document was created. The response JSON body contains
            the new document's `id`, name and other metadata.
        '400':
          description: There is already a document owned by the user with the given name.
        '403':
          description: The caller has permission to see the owner but not create documents.
        '404':
          description: Owner does not exist or caller does not have permission to
            see it.
  /documents/{owner}/{document}:
    get:
      summary: Get document information
      description: |
        Gets `Document` information.
      produces:
      - application/json
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: Authorization
        in: header
        type: string
        description: An API key that has READ access to the document. Optional if
          the document's anonymous access level is READ.
      responses:
        '200':
          description: The document information is returned as JSON.
          schema:
            type: object
            properties:
              id:
                type: string
                example: 6e0738d2-7729-45ea-aecf-62c078ddc6ee
              name:
                type: string
                example: nMP4KdrJbfvAHHZQdTcIXf
              created:
                type: string
                example: 2018-05-29T23:46:37.222Z
              public_access_level:
                type: string
                example: NONE | READ | WRITE
              owner:
                type: object
                example: { (see GET user) }
              userdata:
                type: object
                example: { }
              api_urls:
                type: object
                properties:
                  document:
                    type: string
                    example: https://draft.cloud/api/v1/documents/85f4ac37-5867-442b-8d69-f2e476de8aaf/6e0738d2-7729-45ea-aecf-62c078ddc6ee
                  content:
                    type: string
                    example: https://draft.cloud/api/v1/documents/85f4ac37-5867-442b-8d69-f2e476de8aaf/6e0738d2-7729-45ea-aecf-62c078ddc6ee/content
                  history:
                    type: string
                    example: https://draft.cloud/api/v1/documents/85f4ac37-5867-442b-8d69-f2e476de8aaf/6e0738d2-7729-45ea-aecf-62c078ddc6ee/history
              web_urls:
                type: object
                properties:
                  document:
                    type: string
                    example: https://draft.cloud/edit/KOYCZ1XT23YImR3hcyg6pd7N1tc4eGgoPlEgKbfslW5QsUNB/nMP4KdrJbfvAHHZQdTcIXfrjIIclCeqByeeT60s1a2TfiazS
        '404':
          description: The owner or document does not exist or caller does not have
            permission to see the owner or document.
    put:
      summary: Update document information
      description: |
        Updates an existing `Document`'s metadata information. The request body and response body are both as in GET.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: Content-Type
        in: header
        type: string
        description: Must be `application/json`.
      - name: Authorization
        in: header
        type: string
        description: An API key that has ADMIN access to the document.
        required: true
      responses:
        '200':
          description: The document was updated. The response body is as in GET.
        '403':
          description: The caller has permission to see the document but not make
            changes to its metadata information.
        '404':
          description: Document does not exist or caller does not have permission
            to see the document.
    delete:
      summary: Delete a document
      description: |
        Deletes a `Document`.
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: Authorization
        in: header
        type: string
        description: An API key that has ADMIN access to the document.
        required: true
      responses:
        '200':
          description: The document was deleted.
        '403':
          description: The caller has permission to see the document but not delete
            it.
        '404':
          description: Document does not exist or caller does not have permission
            to see the document.
  /documents/{owner}/{document}/team:
    get:
      summary: Get document team members
      description: |
        Gets a list of all `User`s with READ permission on the `Document`.
      produces:
      - application/json
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: Authorization
        in: header
        type: string
        description: An API key that has READ access to the document. Optional if
          the document's anonymous access level is READ.
      responses:
        '200':
          description: The Document's team members are returned as JSON.
        '404':
          description: The owner or document does not exist or caller does not have
            permission to see the owner or document.
    put:
      summary: Update document team members
      description: |
        Updates `User` permissions on a `Document`. The request body must be a JSON-encoded object
        `{ user: userid, access_level: level }` containing the `id` of the user whose permissions are
        being changed and the new access_level for the user (NONE, READ, WRITE, or ADMIN).
      consumes:
      - application/json
      produces:
      - text/plain
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: Content-Type
        in: header
        type: string
        description: Must be `application/json`.
      - name: Authorization
        in: header
        type: string
        description: An API key that has ADMIN access to the document and READ access
          to the user whose permissions are being changed, unless the user is being
          removed from the Document.
        required: true
      responses:
        '200':
          description: The document permissions were updated.
        '400':
          description: The access_level was invalid.
        '403':
          description: The caller has permission to see the document but not make
            changes to its metadata information.
        '404':
          description: Document does not exist or caller does not have permission
            to see the document.
  /documents/{owner}/{document}/content{path}:
    get:
      summary: Get document content
      description: |
        Gets `Document` content. The document is returned either as JSON or as
        UTF-8 encoded plain text, depending on the Accept header in the request.

        If a JSON Pointer specifying a path to a subpart of the document is sent at
        the end of the URL, then only a part of the document is returned. 
      produces:
      - application/json
      - text/plain
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: path
        in: path
        description: |
          A [JSON Pointer](https://tools.ietf.org/html/rfc6901), which looks like `/x/y/15`.
          (A final `/-` is not permitted.) Optional.
        type: string
        required: true
      - name: Revision-Id
        in: header
        type: string
        description: A Revision `id`. If specified, gets the content of the document
          at the indicated revision. Otherwise the document's content at the most
          recent revision is returned.
      - name: Accept
        in: header
        type: string
        description: Either `text/plain` or `application/json`. (If the Accept header
          says both formats are accepted, you may get either format back.)
      - name: Authorization
        in: header
        type: string
        description: An API key that has READ access to the document. Optional if
          the document's anonymous access level is READ.
      responses:
        '200':
          description: Document content is returned as JSON.
          headers:
            Revision-Id:
              description: The id of the document's current Revision, or the revision
                specified in the Revision-Id header if the header is given. May be
                "singularity" to indicate that the document has not yet had any revisions
                yet. (Such documents always have null content.)
              type: string
            Access-Level:
              description: The access level that the user has on this document. Either
                READ, WRITE, or ADMIN.
              type: string
            Content-Type:
              description: application/json or text/plain, depending on the Accept
                header you send. (If the Accept header says both formats are accepted
                but text/plain is preferred, you may get application/json in the response
                if the document's content is not plain text.)
              type: string
        '404':
          description: Document does not exist or caller does not have permission
            to see the document.
        '406':
          description: The Accept header was set to text/plain but the document
            content is not plain text, or an invalid content type was sent in the
            Accept header.
    put:
      summary: Update document content with new content
      description: |
        Updates the content of a `Document` with content provided in the request body.
        Document content is text or arbitrary JSON data provided in the request body
        (see the request Content-Type header parameter).

        If a [JSON Pointer](https://tools.ietf.org/html/rfc6901) to a subpart of the document is given at the end of the URL (see GET),
        then the content provided in this PUT request replaces the content at the location in the
        document that the pointer points to.

        If a base revision is specified with the Base-Revision-Id header, then the changes made
        relative to the base revision will be merged with the changes made in any Revisions that
        were made after the base revision (probably by other users acting simultaneously).

        The response is a new `Revsion` object.
      consumes:
      - application/json
      - text/plain
      produces:
      - application/json
      - text/plain
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: path
        in: path
        description: |
          A [JSON Pointer](https://tools.ietf.org/html/rfc6901), which looks like `/x/y/15`.
          (A final `/-` is not permitted.) Optional.
        type: string
        required: true
      - name: Revision-Userdata
        in: header
        type: string
        description: JSON-encoded arbitrary user data stored with the Revision.
      - name: Revision-Userdata-*
        in: header
        type: string
        description: Arbitrary string data to store within the Revision's userdata.
      - name: Base-Revision-Id
        in: header
        type: string
        description: An optional `Revision` `id` that the new document content is
          based on. May be `singularity` indicating that the base revision is the
          implicit revision that exists when a document is first created. If not specified,
          the base revision is the document's current revision.
      - name: Content-Type
        in: header
        type: string
        description: Either `text/plain` if you are sending a plain text document
          (it is converted to a JSON string) or `application/json` if you are sending
          arbitrary JSON data as the document.
      - name: Authorization
        in: header
        type: string
        description: An API key that has WRITE access to the document.
        required: true
      responses:
        '200':
          description: A `Revision` was saved. The response is the new
            `Revision`.
        '204':
          description: The document already has the content provided. No `Revision` was created.
        '400':
          description: The path or base revision is not valid.
        '403':
          description: The caller has permission to see the document but not edit
            it.
        '404':
          description: Document does not exist or caller does not have permission
            to see the document
    patch:
      summary: Update document content with a patch
      description: |
        Updates the content of a `Document` with a raw [JOT](https://github.com/joshdata/jot) operation provided in the request body.

        If a [JSON Pointer](https://tools.ietf.org/html/rfc6901) to a subpart of the document is given at the end of the URL (see GET),
        then the operation applies to that location in the document that the pointer points to.

        If a base revision is specified with the Base-Revision-Id header, then the operation
        will be transformed to apply logically as if the changes made in any Revisions that
        were made after the base revision were made simultaneously.

        The response is a new `Revsion` object.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: path
        in: path
        description: |
          A [JSON Pointer](https://tools.ietf.org/html/rfc6901), which looks like `/x/y/15`.
          (A final `/-` is not permitted.) Optional.
        type: string
        required: true
      - name: Revision-Userdata
        in: header
        type: string
        description: JSON-encoded arbitrary user data stored with the Revision.
      - name: Revision-Userdata-*
        in: header
        type: string
        description: Arbitrary string data to store within the Revision's userdata.
      - name: Base-Revision-Id
        in: header
        type: string
        description: An optional `Revision` `id` that the new document content is
          based on. May be `singularity` indicating that the base revision is the
          implicit revision that exists when a document is first created. If not specified,
          the base revision is the document's current revision.
      - name: Content-Type
        in: header
        type: string
        description: Must be `application/json`.
      - name: Authorization
        in: header
        type: string
        description: An API key that has WRITE access to the document.
        required: true
      responses:
        '200':
          description: A `Revision` was saved. The response is the new uncommitted
            `Revision`.
        '400':
          description: The path or base revision is not valid.
        '403':
          description: The caller has permission to see the document but not edit
            it.
        '404':
          description: Document does not exist or caller does not have permission
            to see the document
  /documents/{owner}/{document}/history:
    get:
      summary: Get document revision history
      description: |
        Gets the revision history of a `Document`, which is an array of `Revision` objects.
      produces:
      - application/json
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: since
        in: query
        description: An optional `Revision` `id`. If not specified, the full history
          of the document is returned. Otherwise only the changes made after the given
          revision are returned.
        type: string
      - name: path
        in: query
        description: A [JSON Pointer](https://tools.ietf.org/html/rfc6901), which
          looks like `/x/y/15`, to a part of the document to get the history of, ignoring
          changes to other parts of the document. The path must exist in the document
          at the revision specified by `since`. If `since` is omitted (the full document
          history is returned), then `path` cannot be specified.
        type: string
      - name: Authorization
        in: header
        type: string
        description: An API key that has READ access to the document. Optional if
          the document's anonymous access level is READ.
      responses:
        '200':
          description: Revision history is returned as JSON, in chronological order
            (oldest first). If the `path` parameter is specified, the revisions are
            relative to that location in the document.
        '404':
          description: Document does not exist or caller does not have permission
            to see the document
  /documents/{owner}/{document}/history/{revision}:
    get:
      summary: Get a document revision
      description: |
        Gets a `Revision` object.
      produces:
      - application/json
      parameters:
      - name: owner
        in: path
        description: The `id` of a `User` who owns the document, or "me" if you are the owner.
        required: true
        type: string
      - name: document
        in: path
        description: The `id` of a `Document` owned by  `owner`.
        required: true
        type: string
      - name: revision
        in: path
        description: A `Revision` `id`.
        required: true
        type: string
      - name: Authorization
        in: header
        type: string
        description: An API key that has READ access to the document. Optional if
          the document's anonymous access level is READ.
      responses:
        '200':
          description: The revision is returned as JSON.
        '404':
          description: Document does not exist or caller does not have permission
            to see the document
